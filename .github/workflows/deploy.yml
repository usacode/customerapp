name: CI/CD Pipeline to AWS EKS

on:
  push:
    branches:
      - master  # Specify the branch to trigger the workflow.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read   # Required to read the repository contents

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Make gradlew executable (for Java projects)
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 3: Set up JDK for building the Spring Boot app (if applicable)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # Step 4: Build the Spring Boot application JAR and run tests
      - name: Build and Run Tests
        run: ./gradlew clean build
        env:
          CI: true  # Ensures Gradle runs in CI mode

      # Step 5: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 6: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Step 7: Build Docker Image
      # This assumes that the Dockerfile is configured to copy the Spring Boot JAR into the image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest .

      # Step 8: Push the Docker image to Amazon ECR
      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 9: Update kubeconfig for EKS access
      - name: Configure kubectl with EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # Step 10: Test kubectl connectivity
      - name: Test kubectl connectivity
        run: kubectl get nodes

      # Step 11: Deploy to EKS
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml --validate=false
          kubectl apply -f k8s/service.yaml --validate=false